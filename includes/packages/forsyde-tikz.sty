% A library with graphical primitives for ForSyDe process networks
%
% Author: George Ungureanu, KTH - Royal Institute of Technology, Sweden
% Version: 0.3
% Date: 2015/05/20
\NeedsTeXFormat{LaTeX2e}
\RequirePackage{pgfplots}
  \pgfplotsset{compat=1.9}
\RequirePackage{pgfkeys}
\RequirePackage{xparse,l3regex}
\RequirePackage{todonotes} % WHA?!
\RequirePackage{ezkeys}
\RequirePackage{xstring}
\usetikzlibrary{decorations.markings, shapes, calc, fit, backgrounds}

\ProvidesPackage{forsyde-tikz}
              [2015/05/20 v0.3 ForSyDe TikZ Library]

\usetikzlibrary{fkeys,fshapes,fpaths,forsyde}


%%%%%%%%%%%%%
% CONSTANTS %
%%%%%%%%%%%%%
% Colors
\newcommand{\defaultdrawcolor}{black}     		% draw color of signal paths
\newcommand{\defaultfillcolor}{white}     		% draw color of signal paths
\definecolor{sycolor}{RGB}{148,183,215}
\definecolor{ctcolor}{RGB}{225,119,19}
\definecolor{decolor}{RGB}{80,229,154}
\definecolor{sdfcolor}{RGB}{220,220,20}
\definecolor{blackboxcolor}{gray}{0.80}
% line widths of
\newlength{\sepq}\pgfmathsetlength{\sepq}{2pt}
\newcommand{\compositelinewidth}{.4pt}       % composite process line width
\newcommand{\skeletonlinewidth}{1pt}         % parallel processes line width
\newcommand{\signalpathlinewidth}{1pt}       % signal paths
\newcommand{\functionpathlinewidth}{.8pt}    % function paths
\newcommand{\vectorpathlinewidth}{4pt}       % vector paths
% sizes, etc.
\newcommand{\tokensize}{2pt}
\newcommand{\halftokensize}{1pt}
\newcommand{\vectorportsize}{3pt}
\newcommand{\signalportsize}{2pt}

%%%%%%%%%%%%%%%%%%%%%%%%
% GENERIC TIKZ HELPERS %
%%%%%%%%%%%%%%%%%%%%%%%%
% Positioning of node text.
% #1 = node label
% #2 = label text
\newcommand{\textaboveof}[2]{\pgftext[bottom,at=\pgfpointanchor{#1}{north},y=+1mm]{#2}}%
\newcommand{\textrightof}[2]{\pgftext[left,  at=\pgfpointanchor{#1}{east}, x=+1mm]{#2}}%
\newcommand{\textbelowof}[2]{\pgftext[top,   at=\pgfpointanchor{#1}{south},y=-1mm]{#2}}%
\newcommand{\textleftof} [2]{\pgftext[right, at=\pgfpointanchor{#1}{west}, x=-1mm]{#2}}%


% Conditional if node was defined.
% #1 = node label
% #2 = true-statement
% #3 = false-statement
\long\def\ifnodedefined#1#2#3{%
    \@ifundefined{pgf@sh@ns@#1}{#3}{#2}%
}

% Decorate process ports with info
% #1 = node label
\newcounter{iportnum}
\newcounter{oportnum}
\newcommand\portinfo[1]{
  \setcounter{iportnum}{0}\setcounter{oportnum}{0}
  \def\currentport{#1-p}
  \def\iportinfoanchy{south east}
  \def\oportinfoanchy{south west}
  \def\iportinfoshift{1mm}
  \def\oportinfoshift{1mm}
}
\newcommand\consumption[1]{
  \addtocounter{iportnum}{1}
  \node[anchor=\iportinfoanchy, xshift=-1mm, yshift=\iportinfoshift] 
      at (\currentport.i\theiportnum) {\tiny #1};
  \def\iportinfoanchy{north east}
  \def\iportinfoshift{-1mm}
}
\newcommand\production[1]{
  \addtocounter{oportnum}{1}
  \node[anchor=\oportinfoanchy, xshift=1mm, yshift=\oportinfoshift] 
      at (\currentport.o\theoportnum) {\tiny #1};
  \def\oportinfoanchy{north west}
  \def\oportinfoshift{-1mm}
}